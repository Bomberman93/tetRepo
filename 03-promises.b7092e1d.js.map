{"version":3,"sources":["js/03-promises.js"],"names":["menuList","document","querySelector","baseUrl","getDataServer","url","fetch","then","response","json","data","markup","Object","entries","map","key","value","join","innerHTML"],"mappings":";AAmFA,MAAMA,EAAWC,SAASC,cAAc,eAClCC,EAAU,kCAGhB,SAASC,EAAeC,GACfC,OAAAA,MAAOD,GACXE,KAAKC,GAAYA,EAASC,QAG/BL,EAAcD,GAASI,KAAKG,IACpBC,MAAAA,EAASC,OAAOC,QAAQH,GAAMI,IAAI,EAAEC,EAAKC,qBAC/BA,MAAUD,cAAgBE,KAAK,IAC/CjB,EAASkB,UAAYP","file":"03-promises.b7092e1d.js","sourceRoot":"../src","sourcesContent":["// function convertS(s) {\n//   const hours = Math.floor(s / 60 / 60);\n//   s = s - 60 * 60 * hours;\n//   const minutes = Math.floor(s / 60);\n//   s = s - 60 * minutes;\n//   const secunds = s;\n//   refs.hours.innerHTML = hours.toString().padStart(2, 0);\n//   refs.minutes.innerHTML = minutes.toString().padStart(2, 0);\n//   refs.secunds.innerHTML = secunds.toString().padStart(2, 0);\n// };\n// let secund = 0;\n// let intervalId;\n\n// const refs = {\n//   hours: document.querySelector('#hours'),\n//   minutes: document.querySelector('#minutes'),\n//   secunds: document.querySelector('#secunds'),\n//   targetTimer: document.querySelector('#target-timer'),\n//   save: document.querySelector('#save'),\n// };\n\n// refs.save.addEventListener('click', e => {\n//   imitatedServer('times').then(res => {\n//     const times = res === null ? [] : res;\n//     times.push(secund);\n//     return times;\n//   })\n//   .then((times) => {\n//     return imitatedServer('times', 'SET', times);\n//   })\n//   .catch(console.log);\n// });\n\n// refs.targetTimer.addEventListener('click', onTimerClick);\n\n// function onTimerClick(e) {\n//   if (e.target.textContent === 'Stop') {\n//     clearInterval(intervalId);\n//     e.target.textContent = 'Start';\n//   } else {\n//     intervalId = setInterval(() => {\n//       secund += 1;\n//       convertS(secund);\n//     }, 1000);\n//     e.target.textContent = 'Stop';\n//   }\n// };\n\n// function printTimestamp(s) {\n//   const hours = Math.floor(s / 60 / 60);\n//   s = s - 60 * 60 * hours;\n//   const minutes = Math.floor(s / 60);\n//   s = s - 60 * minutes;\n//   const secunds = s;\n//   refs.timestamp.insertAdjacentHTML(\n//     'beforeend',\n//     `<li>${hours.toString().padStart(2, 0)}:${minutes.toString().padStart(2, 0)}:${secunds\n//       .toString()\n//       .padStart(2, 0)}</li>`,\n//   );\n// };\n\n// const imitatedServer = (key, type = 'GET', data = {}) => {\n//   const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\n//   return new Promise((res, rej) => {\n//     setTimeout(() => {\n//       if (Math.random() > 0.2) {\n//         if (type === 'GET') {\n//           res(JSON.parse(localStorage.getItem(key)));\n//         } else if (type === 'SET') {\n//           localStorage.setItem(key, JSON.stringify(data));\n//           res(true);\n//         } else {\n//           rej('invalid type');\n//         }\n//       } else rej('oops!!!');\n//     }, getRandomInt(1000, 5000));\n//   });\n// };\n/*------------------------------------------------------------*/\n\n\nconst menuList = document.querySelector('.menu__link');\nconst baseUrl = 'https://rickandmortyapi.com/api';\n\n\nfunction getDataServer (url) {\n  return fetch (url)\n    .then(response => response.json());\n}\n\ngetDataServer(baseUrl).then(data => {\n  const markup = Object.entries(data).map(([key, value]) => \n  `<li><a href=\"${value}\">${key}</a></li>`).join('');\n  menuList.innerHTML = markup;\n});\n\n "]}